// Code generated by protoc-gen-go. DO NOT EDIT.
// source: quiz.proto

package quiz

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QuizRequest struct {
	Offset               int32    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuizRequest) Reset()         { *m = QuizRequest{} }
func (m *QuizRequest) String() string { return proto.CompactTextString(m) }
func (*QuizRequest) ProtoMessage()    {}
func (*QuizRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{0}
}

func (m *QuizRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuizRequest.Unmarshal(m, b)
}
func (m *QuizRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuizRequest.Marshal(b, m, deterministic)
}
func (m *QuizRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizRequest.Merge(m, src)
}
func (m *QuizRequest) XXX_Size() int {
	return xxx_messageInfo_QuizRequest.Size(m)
}
func (m *QuizRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuizRequest proto.InternalMessageInfo

func (m *QuizRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type QuestionQuizList struct {
	QuizQuestion         []*QuizQuestion `protobuf:"bytes,1,rep,name=quiz_question,json=quizQuestion,proto3" json:"quiz_question,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *QuestionQuizList) Reset()         { *m = QuestionQuizList{} }
func (m *QuestionQuizList) String() string { return proto.CompactTextString(m) }
func (*QuestionQuizList) ProtoMessage()    {}
func (*QuestionQuizList) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{1}
}

func (m *QuestionQuizList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestionQuizList.Unmarshal(m, b)
}
func (m *QuestionQuizList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestionQuizList.Marshal(b, m, deterministic)
}
func (m *QuestionQuizList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionQuizList.Merge(m, src)
}
func (m *QuestionQuizList) XXX_Size() int {
	return xxx_messageInfo_QuestionQuizList.Size(m)
}
func (m *QuestionQuizList) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionQuizList.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionQuizList proto.InternalMessageInfo

func (m *QuestionQuizList) GetQuizQuestion() []*QuizQuestion {
	if m != nil {
		return m.QuizQuestion
	}
	return nil
}

type QuizQuestion struct {
	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Question string   `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Answers  []string `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	// We need to think about it. If we send the data to a client
	// then it's "very" easy to cheat
	CorrectAnswerIdx     int32    `protobuf:"varint,4,opt,name=correct_answer_idx,json=correctAnswerIdx,proto3" json:"correct_answer_idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuizQuestion) Reset()         { *m = QuizQuestion{} }
func (m *QuizQuestion) String() string { return proto.CompactTextString(m) }
func (*QuizQuestion) ProtoMessage()    {}
func (*QuizQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{2}
}

func (m *QuizQuestion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuizQuestion.Unmarshal(m, b)
}
func (m *QuizQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuizQuestion.Marshal(b, m, deterministic)
}
func (m *QuizQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizQuestion.Merge(m, src)
}
func (m *QuizQuestion) XXX_Size() int {
	return xxx_messageInfo_QuizQuestion.Size(m)
}
func (m *QuizQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_QuizQuestion proto.InternalMessageInfo

func (m *QuizQuestion) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuizQuestion) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *QuizQuestion) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *QuizQuestion) GetCorrectAnswerIdx() int32 {
	if m != nil {
		return m.CorrectAnswerIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*QuizRequest)(nil), "quiz.QuizRequest")
	proto.RegisterType((*QuestionQuizList)(nil), "quiz.QuestionQuizList")
	proto.RegisterType((*QuizQuestion)(nil), "quiz.QuizQuestion")
}

func init() { proto.RegisterFile("quiz.proto", fileDescriptor_93138adfabfb5582) }

var fileDescriptor_93138adfabfb5582 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x25, 0x49, 0x29, 0xf4, 0x1a, 0x50, 0xb9, 0xa1, 0xb2, 0x3a, 0x45, 0x91, 0x90, 0x32, 0xa0,
	0x0e, 0x65, 0x60, 0x60, 0x62, 0x42, 0x7c, 0x2c, 0x35, 0x3f, 0x20, 0x82, 0xe4, 0x2a, 0xdd, 0x52,
	0x13, 0xdb, 0x81, 0xaa, 0x23, 0xbf, 0x1c, 0xd9, 0xb5, 0x4b, 0xd8, 0xfc, 0x3e, 0x7c, 0x77, 0xef,
	0x01, 0x74, 0x3d, 0xef, 0x97, 0x9f, 0x5a, 0x59, 0x85, 0x23, 0xf7, 0x2e, 0xaf, 0x61, 0xba, 0xee,
	0x79, 0x2f, 0xa9, 0xeb, 0xc9, 0x58, 0x9c, 0xc3, 0x58, 0x6d, 0x36, 0x86, 0xac, 0x48, 0x8a, 0xa4,
	0x3a, 0x95, 0x01, 0x95, 0x2f, 0x30, 0x5b, 0x3b, 0x03, 0xab, 0xad, 0xb3, 0xbf, 0xb2, 0xb1, 0x78,
	0x07, 0x17, 0x6e, 0x44, 0xdd, 0x05, 0x41, 0x24, 0x45, 0x56, 0x4d, 0x57, 0xb8, 0xf4, 0x4b, 0x9c,
	0x2d, 0x7e, 0x91, 0x79, 0x37, 0x40, 0xe5, 0x4f, 0x02, 0xf9, 0x50, 0xc6, 0x4b, 0x48, 0xb9, 0xf5,
	0x1b, 0x27, 0x32, 0xe5, 0x16, 0x17, 0x70, 0x7e, 0x1c, 0x9a, 0x7a, 0xf6, 0x88, 0x51, 0xc0, 0xd9,
	0xfb, 0xd6, 0x7c, 0x93, 0x36, 0x22, 0x2b, 0xb2, 0x6a, 0x22, 0x23, 0xc4, 0x1b, 0xc0, 0x46, 0x69,
	0x4d, 0x8d, 0xad, 0x0f, 0x54, 0xcd, 0xed, 0x4e, 0x8c, 0x7c, 0x8e, 0x59, 0x50, 0x1e, 0xbc, 0xf0,
	0xd4, 0xee, 0x56, 0xcf, 0x87, 0xe0, 0x6f, 0xa4, 0xbf, 0xb8, 0x21, 0xbc, 0x87, 0xfc, 0x91, 0x6c,
	0xbc, 0xc8, 0xe0, 0xd5, 0x5f, 0x8a, 0xd0, 0xcd, 0x62, 0x1e, 0xa9, 0xff, 0x3d, 0x94, 0x27, 0x1f,
	0x63, 0xdf, 0xe8, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xe2, 0xd3, 0x57, 0x5f, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuizServiceClient interface {
	GetQuestions(ctx context.Context, in *QuizRequest, opts ...grpc.CallOption) (*QuestionQuizList, error)
}

type quizServiceClient struct {
	cc *grpc.ClientConn
}

func NewQuizServiceClient(cc *grpc.ClientConn) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) GetQuestions(ctx context.Context, in *QuizRequest, opts ...grpc.CallOption) (*QuestionQuizList, error) {
	out := new(QuestionQuizList)
	err := c.cc.Invoke(ctx, "/quiz.QuizService/GetQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
type QuizServiceServer interface {
	GetQuestions(context.Context, *QuizRequest) (*QuestionQuizList, error)
}

func RegisterQuizServiceServer(s *grpc.Server, srv QuizServiceServer) {
	s.RegisterService(&_QuizService_serviceDesc, srv)
}

func _QuizService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quiz.QuizService/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuestions(ctx, req.(*QuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuizService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _QuizService_GetQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz.proto",
}
